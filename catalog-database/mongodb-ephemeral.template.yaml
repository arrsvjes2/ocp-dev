---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    openshift.io/display-name: MongoDB (Persistent)
    openshift.io/documentation-url: 'https://docs.okd.io/latest/using_images/db_images/mongodb.html'
    tags: 'database,mongodb'
    description: >-
      MongoDB database service, with persistent storage. For more information
      about using this template, including OpenShift considerations, see
      documentation in the upstream repository:
      https://github.com/sclorg/mongodb-container.

    openshift.io/long-description: >-
      This template provides a standalone MongoDB server with a database
      created. The database is stored on persistent storage, so any restart
      of the service will not affect the created data. The database name,
      username, and password are chosen via parameters when provisioning this
      service.
    iconClass: icon-mongodb
    openshift.io/provider-display-name: 'Red Hat, Inc.'
  name: mongodb-persistent
  labels:
    samples.operator.openshift.io/managed: 'false'
message: >-
  The following service(s) have been created in your project:
  ${DATABASE_SERVICE_NAME}.

         Username: ${MONGODB_USER}
         Password: ${MONGODB_PASSWORD}
    Database Name: ${MONGODB_DATABASE}
   Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}

objects:
#   - apiVersion: rbac.authorization.k8s.io/v1
#     kind: Role
#     metadata:
#       annotations:
#       name: '${DATABASE_SERVICE_NAME}-scc-anyuid'
#     rules:
#     - apiGroups:
#       - security.openshift.io
#       resourceNames:
#       - anyuid
#       resources:
#       - securitycontextconstraints
#       verbs:
#       - use
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: '${DATABASE_SERVICE_NAME}'
#   - apiVersion: rbac.authorization.k8s.io/v1
#     kind: RoleBinding
#     metadata:
#       name: ${DATABASE_SERVICE_NAME}-scc-anyuid
#     roleRef:
#       apiGroup: rbac.authorization.k8s.io
#       kind: Role
#       name: '${DATABASE_SERVICE_NAME}-scc-anyuid'
#     subjects:
#     - kind: ServiceAccount
#       name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: '${DATABASE_SERVICE_NAME}'
    stringData:
      database-name: '${MONGODB_DATABASE}'
      database-password: '${MONGODB_PASSWORD}'
      database-user: '${MONGODB_USER}'
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: 'mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}'
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      ports:
        - name: mongo
          nodePort: 0
          port: 27017
          protocol: TCP
          targetPort: 27017
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
#   - apiVersion: v1
#     kind: PersistentVolumeClaim
#     metadata:
#       name: ${DATABASE_SERVICE_NAME}
#     spec:
#       accessModes:
#       - ReadWriteOnce
#       resources:
#           storage: ${VOLUME_CAPACITY}
#       volumeMode: Filesystem
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app.kubernetes.io/part-of: catalog
        app.kubernetes.io/component: database
        app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
        app.openshift.io/runtime: mongodb
      name: ${DATABASE_SERVICE_NAME}
    spec:
      podManagementPolicy: OrderedReady
      replicas: 1
      revisionHistoryLimit: 2
      selector:
        matchLabels:
          name: ${DATABASE_SERVICE_NAME}
      serviceName: ${DATABASE_SERVICE_NAME}
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - name: mongodb
            env:
              - name: MONGO_INITDB_ROOT_USERNAME
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: '${DATABASE_SERVICE_NAME}'
              - name: MONGO_INITDB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: '${DATABASE_SERVICE_NAME}'
              - name: MONGO_INITDB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: '${DATABASE_SERVICE_NAME}'
            image: ${MONGODB_IMAGE}
            imagePullPolicy: IfNotPresent
            lifecycle:
              postStart:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - |-
                      while ! echo exit | </dev/tcp/127.0.0.1/27017; do \
                        echo "waiting for the database"; sleep 3; \
                      done; \
                      mongoimport -u ${MONGODB_USER} -p ${MONGODB_PASSWORD} --authenticationDatabase admin -h localhost --db ${MONGODB_DATABASE} --collection category --drop --type json --file /data/catalog/category.json;
                      mongoimport -u ${MONGODB_USER} -p ${MONGODB_PASSWORD} --authenticationDatabase admin -h localhost --db ${MONGODB_DATABASE} --collection product --drop --type json --file /data/catalog/product.json;
            livenessProbe:
              exec:
                command:
                - mongo
                - --eval
                - db.adminCommand('ping')
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              exec:
                command:
                - mongo
                - --eval
                - db.adminCommand('ping')
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 5
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /data/db
              name: ${DATABASE_SERVICE_NAME}-data
            - mountPath: /data/catalog
              name: ${DATABASE_SERVICE_NAME}-init
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 1001
          serviceAccount: ${DATABASE_SERVICE_NAME}
          serviceAccountName: ${DATABASE_SERVICE_NAME}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${DATABASE_SERVICE_NAME}-data
              emptyDir: {}
            - name: ${DATABASE_SERVICE_NAME}-init
              secret:
                secretName: ${DATABASE_SERVICE_NAME}-initdb
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate

parameters:
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    value: 256Mi
    required: true
  - name: DATABASE_SERVICE_NAME
    displayName: Database Service Name
    description: The name of the OpenShift Service exposed for the database.
    value: mongodb-standalone
    required: true
  - name: MONGODB_USER
    displayName: MongoDB Connection Username
    description: Username for MongoDB user that will be used for accessing the database.
    generate: expression
    from: 'user[A-Z0-9]{3}'
    required: true
  - name: MONGODB_PASSWORD
    displayName: MongoDB Connection Password
    description: Password for the MongoDB connection user.
    generate: expression
    from: '[a-zA-Z0-9]{16}'
    required: true
  - name: MONGODB_DATABASE
    displayName: MongoDB Database Name
    description: Name of the MongoDB database accessed.
    value: sampledb
    required: true
  - name: MONGODB_IMAGE
    displayName: MongoDB Image
    description: MongoDB image to be used (docker.io/mongo:3.6 or latest).
    value: 'registry.domain14.example.com/library/mongo:5.0'
    required: true
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 512Mi
labels:
  template: mongodb-persistent-template
  database: ${DATABASE_SERVICE_NAME}

